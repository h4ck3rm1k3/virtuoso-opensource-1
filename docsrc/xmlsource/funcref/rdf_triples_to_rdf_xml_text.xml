<?xml version="1.0" encoding="ISO-8859-1"?>
<refentry id="fn_rdf_triples_to_rdf_xml_text">
  <refmeta>
    <refentrytitle>DB.DBA.RDF_TRIPLES_TO_RDF_XML_TEXT</refentrytitle>
    <refmiscinfo>rdf</refmiscinfo>
  </refmeta>
  <refnamediv>
    <refname>DB.DBA.RDF_TRIPLES_TO_RDF_XML_TEXT</refname>
    <refpurpose>Serializes vector of triples into a session, in RDF/XML syntax.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis id="fsyn_rdf_triples_to_rdf_xml_text">
      <funcprototype id="fproto_rdf_triples_to_rdf_xml_text">
        <funcdef><function>DB.DBA.RDF_TRIPLES_TO_RDF_XML_TEXT</function></funcdef>
	<paramdef>inout <parameter>triples</parameter> any</paramdef>
	<paramdef>in <parameter>print_top_level</parameter> any</paramdef>
        <paramdef>inout <parameter>ses</parameter> any</paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>
  <refsect1 id="desc_rdf_triples_to_rdf_xml_text">
    <title>Description</title>
    <para>Serializes vector of triples into a session, in TURTLE syntax. In current version, every triple is printed in separate top-level record (say, in rdf:Description tag),
without any pretty-print or nesting optimization.</para>
  </refsect1>
  <refsect1 id="params_rdf_triples_to_rdf_xml_text">
    <title>Parameters</title>
    <refsect2><title>triples</title>
      <para>vector of triples in 'long valmode'.</para>
    </refsect2>
    <refsect2><title>print_top_level</title>
      <para>zero if only rdf:Description tags should be written, non-zero if the rdf:RDF top-level element should also be written</para>
    </refsect2>
    <refsect2><title>ses</title>
      <para>an output stream in server default encoding</para>
    </refsect2>
  </refsect1>
<!--  <refsect1 id="ret_rdf_triples_to_rdf_xml_text"><title>Return Types</title>
    <para>any</para>
  </refsect1>
  <refsect1 id="errors_rdf_triples_to_rdf_xml_text">
    <title>Errors</title>
    <para>This function can generate the following errors:</para>
    <errorcode></errorcode>
  </refsect1>
-->
  <refsect1 id="examples_rdf_triples_to_rdf_xml_text">
    <title>Examples</title>
    <example id="ex_rdf_triples_to_rdf_xml_text"><title></title>
      <para></para>
      <screen><![CDATA[
create procedure simple_test(in query varchar, in dflt_graph varchar)
{
  declare ses, rset, triples any;
  declare txt varchar;
  ses := string_output ();
  rset := DB.DBA.SPARQL_EVAL_TO_ARRAY (query, dflt_graph, 1);
  triples := dict_list_keys (rset[0][0], 1);
  DB.DBA.RDF_TRIPLES_TO_RDF_XML_TEXT (triples, 1, ses);
  txt := string_output_string (ses);
  dump_large_text (txt);
}
;
]]>
</screen>
    </example>
  </refsect1>
  <refsect1 id="seealso_rdf_triples_to_rdf_xml_text">
    <title>See Also</title>
    <para><link linkend="fn_rdf_audit_metadata"><function>DB.DBA.RDF_AUDIT_METADATA</function></link></para>
    <para><link linkend="fn_rdf_backup_metadata"><function>DB.DBA.RDF_BACKUP_METADATA</function></link></para>
    <para><link linkend="fn_rdf_load_rdfxml_mt"><function>DB.DBA.RDF_LOAD_RDFXML_MT</function></link></para>
    <para><link linkend="fn_ttlp"><function>DB.DBA.TTLP</function></link></para>
    <para><link linkend="fn_ttlp_mt"><function>DB.DBA.TTLP_MT</function></link></para>
    <para><link linkend="fn_rdf_triples_to_ttl"><function>DB.DBA.RDF_TRIPLES_TO_TTL</function></link></para>
  </refsect1>
</refentry>
